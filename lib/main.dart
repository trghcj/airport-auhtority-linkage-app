import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:gsheets/gsheets.dart';

// --- Firebase Integration ---
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

// Import the generated Firebase options file
// This file should be generated by FlutterFire CLI
import 'firebase_options.dart'; // Make sure this file exists

// --- Firebase Initialization (CORRECTED) ---
Future <void> main() async {
  // Ensure that Flutter bindings are initialized before calling Firebase.initializeApp()
  WidgetsFlutterBinding.ensureInitialized();
  
  // Manually initialize Firebase for Web
  if (kIsWeb) {
    await Firebase.initializeApp(
      options: const FirebaseOptions(
        apiKey: 'YOUR_API_KEY',
        authDomain: 'YOUR_PROJECT.firebaseapp.com',
        projectId: 'YOUR_PROJECT_ID',
        storageBucket: 'YOUR_PROJECT.appspot.com',
        messagingSenderId: 'YOUR_SENDER_ID',
        appId: 'YOUR_APP_ID',
        measurementId: 'G-XXXXXXX', // optional
      ),
    );
  } else {
    await Firebase.initializeApp(); // for mobile
  }
  
  runApp(const MyApp());
}

class DefaultFirebaseOptions {
  // ignore: prefer_typing_uninitialized_variables
  static var currentPlatform;
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Airport Flight & Billing System',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Inter',
        scaffoldBackgroundColor: Colors.grey[50],
        cardTheme: const CardThemeData(
          elevation: 4,
          shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.all(Radius.circular(12))),
          margin: EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0),
        ),
      ),
      home: const HomeScreen(),
    );
  }
}

// --- Data Models (MODIFIED to handle Firestore Timestamps) ---

class Flight {
  final String flightNumber;
  final String departureCity;
  final String arrivalCity;
  final String departureTime;
  final String arrivalTime;
  final String travelLinkage;
  final bool isLinkageMissing;
  final String regNo;
  final DateTime? arrivalIST;
  final DateTime? departureIST;
  final double airHours;
  final String arrFlightNo;
  final String depFlightNo;

  Flight({
    required this.flightNumber,
    required this.departureCity,
    required this.arrivalCity,
    required this.departureTime,
    required this.arrivalTime,
    required this.travelLinkage,
    required this.isLinkageMissing,
    required this.regNo,
    this.arrivalIST,
    this.departureIST,
    required this.airHours,
    required this.arrFlightNo,
    required this.depFlightNo,
  });

  // Factory to create from Firestore document
  factory Flight.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data()!;
    return Flight(
      flightNumber: data['flightNumber'] ?? 'N/A',
      departureCity: data['departureCity'] ?? 'N/A',
      arrivalCity: data['arrivalCity'] ?? 'N/A',
      departureTime: data['departureTime'] ?? 'N/A',
      arrivalTime: data['arrivalTime'] ?? 'N/A',
      travelLinkage: data['travelLinkage'] ?? 'N/A',
      isLinkageMissing: data['isLinkageMissing'] ?? true,
      regNo: data['regNo'] ?? 'N/A',
      // Handle Firestore Timestamps
      arrivalIST: (data['arrivalIST'] as Timestamp?)?.toDate(),
      departureIST: (data['departureIST'] as Timestamp?)?.toDate(),
      airHours: (data['airHours'] as num? ?? 0.0).toDouble(),
      arrFlightNo: data['arrFlightNo'] ?? 'N/A',
      depFlightNo: data['depFlightNo'] ?? 'N/A',
    );
  }
}

class DailyAirtime {
  final DateTime flightDate;
  final String regNo;
  final double totalAirHours;
  final String status;
  final Color statusColor;

  DailyAirtime({
    required this.flightDate,
    required this.regNo,
    required this.totalAirHours,
    required this.status,
    required this.statusColor,
  });

  static Color _colorFromHex(String hexColor) {
    hexColor = hexColor.toUpperCase().replaceAll("#", "");
    if (hexColor.length == 6) {
      hexColor = "FF$hexColor";
    }
    return Color(int.parse(hexColor, radix: 16));
  }

  // Factory to create from Firestore document
  factory DailyAirtime.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data()!;
    return DailyAirtime(
      flightDate: (data['flightDate'] as Timestamp).toDate(),
      regNo: data['regNo'],
      totalAirHours: (data['totalAirHours'] as num).toDouble(),
      status: data['status'],
      statusColor: _colorFromHex(data['statusColor']),
    );
  }
}

class Billing {
  final String flightNumber;
  final double totalBill;
  final double amountPaid;
  final DateTime dueDate;
  final String paymentStatusRaw;
  final bool isOverdue;
  final double amountRemaining;

  Billing({
    required this.flightNumber,
    required this.totalBill,
    required this.amountPaid,
    required this.dueDate,
    required this.paymentStatusRaw,
    required this.isOverdue,
    required this.amountRemaining,
  });

  // Factory to create from Firestore document
  factory Billing.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data()!;
    return Billing(
      flightNumber: data['flightNumber'] ?? 'N/A',
      totalBill: (data['totalBill'] as num? ?? 0.0).toDouble(),
      amountPaid: (data['amountPaid'] as num? ?? 0.0).toDouble(),
      dueDate: (data['dueDate'] as Timestamp? ?? Timestamp.now()).toDate(),
      paymentStatusRaw: data['paymentStatusRaw'] ?? 'N/A',
      isOverdue: data['isOverdue'] ?? false,
      amountRemaining: (data['amountRemaining'] as num? ?? 0.0).toDouble(),
    );
  }
}

// --- Home Screen ---

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  late TabController _tabController;
  final TextEditingController _searchController = TextEditingController();

  bool _isLoading = true;
  String? _error;
  List<Flight> _allFlights = [];
  List<Billing> _allBilling = [];
  List<DailyAirtime> _allAirtime = [];

  List<Flight> _filteredFlights = [];
  List<Billing> _filteredBilling = [];
  List<DailyAirtime> _filteredAirtime = [];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _fetchDataFromFirestore();
    _searchController.addListener(_filterData);
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  // --- Data Fetching Logic (Firebase) ---
  Future<void> _fetchDataFromFirestore() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      // Get an instance of Firestore
      final db = FirebaseFirestore.instance;

      // Fetch all data concurrently
      final flightsFuture = db.collection('flights').get();
      final billingFuture = db.collection('billing').get();
      final airtimeFuture = db.collection('dailyAirtime').get();

      // Wait for all fetches to complete
      final responses = await Future.wait([flightsFuture, billingFuture, airtimeFuture]);
      
      final flightDocs = responses[0];
      final billingDocs = responses[1];
      final airtimeDocs = responses[2];

      // Parse the documents into your data models
      final flights = flightDocs.docs.map((doc) => Flight.fromFirestore(doc)).toList();
      final billingRecords = billingDocs.docs.map((doc) => Billing.fromFirestore(doc)).toList();
      final dailyAirtime = airtimeDocs.docs.map((doc) => DailyAirtime.fromFirestore(doc)).toList();
      
      setState(() {
        _allFlights = flights;
        _allBilling = billingRecords;
        _allAirtime = dailyAirtime;
        
        // Initialize filtered lists
        _filteredFlights = flights;
        _filteredBilling = billingRecords;
        _filteredAirtime = dailyAirtime;

        _isLoading = false;
      });

    } catch (e) {
      // ignore: avoid_print
      print('Error fetching data from Firestore: $e');
      setState(() {
        _error = 'Could not fetch data from Firestore. Please check your connection and configuration.';
        _isLoading = false;
      });
    }
  }

  void _filterData() {
    final query = _searchController.text.toLowerCase();
    setState(() {
      if (query.isEmpty) {
        _filteredFlights = _allFlights;
        _filteredBilling = _allBilling;
        _filteredAirtime = _allAirtime;
      } else {
        _filteredFlights = _allFlights.where((flight) {
          return flight.flightNumber.toLowerCase().contains(query) ||
              flight.regNo.toLowerCase().contains(query);
        }).toList();

        final filteredFlightNumbers = _filteredFlights.map((f) => f.flightNumber).toSet();
        final filteredRegNos = _filteredFlights.map((f) => f.regNo).toSet();

        _filteredBilling = _allBilling.where((billing) {
          return filteredFlightNumbers.contains(billing.flightNumber);
        }).toList();

        _filteredAirtime = _allAirtime.where((airtime) {
          return filteredRegNos.contains(airtime.regNo);
        }).toList();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Airport Operations Dashboard'),
        centerTitle: true,
        backgroundColor: Colors.indigo,
        foregroundColor: Colors.white,
        elevation: 4.0,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(bottom: Radius.circular(20)),
        ),
        bottom: TabBar(
          controller: _tabController,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          indicator: BoxDecoration(
              borderRadius: BorderRadius.circular(20),
              color: Colors.indigo[700]),
          tabs: const [
            Tab(text: 'Flights', icon: Icon(Icons.flight_takeoff_outlined)),
            Tab(text: 'Billing', icon: Icon(Icons.receipt_long_outlined)),
            Tab(text: 'Airtime Analysis', icon: Icon(Icons.show_chart_outlined)),
          ],
        ),
      ),
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    if (_error != null) {
      return _buildErrorWidget(_error!);
    }
    return Column(
      children: [
        _buildSearchBar(),
        Expanded(
          child: TabBarView(
            controller: _tabController,
            children: [
              _buildFlightsTab(_filteredFlights),
              _buildBillingTab(_filteredBilling),
              _buildAirtimeAnalysisTab(_filteredAirtime),
            ],
          ),
        ),
      ],
    );
  }
  
  Widget _buildSearchBar() {
    return Padding(
      padding: const EdgeInsets.all(12.0),
      child: TextField(
        controller: _searchController,
        decoration: InputDecoration(
          labelText: 'Search by Flight or Registration No.',
          prefixIcon: const Icon(Icons.search),
          suffixIcon: _searchController.text.isNotEmpty
              ? IconButton(
                  icon: const Icon(Icons.clear),
                  onPressed: () {
                    _searchController.clear();
                  },
                )
              : null,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(15.0),
            borderSide: const BorderSide(color: Colors.indigo),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(15.0),
            borderSide: BorderSide(color: Colors.indigo[800]!, width: 2),
          ),
        ),
      ),
    );
  }
  
  Widget _buildErrorWidget(String error) {
    return Center(
      child: Container(
        padding: const EdgeInsets.all(24.0),
        margin: const EdgeInsets.all(24.0),
        decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(15),
            boxShadow: [
              BoxShadow(
                  // ignore: deprecated_member_use
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  spreadRadius: 2)
            ]),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error_outline, color: Colors.redAccent, size: 60),
            const SizedBox(height: 16),
            Text(
              'An Error Occurred',
              textAlign: TextAlign.center,
              style: TextStyle(
                  color: Colors.grey[800],
                  fontSize: 20,
                  fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Text(
              error.replaceAll("Exception:", "").trim(),
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.grey[600], fontSize: 14),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              icon: const Icon(Icons.refresh),
              onPressed: _fetchDataFromFirestore,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.indigo,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
              label: const Text('Retry'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFlightsTab(List<Flight> flights) {
    return flights.isEmpty
        ? const Center(child: Text("No matching flights found."))
        : ListView(
            padding: const EdgeInsets.all(8.0),
            children: [
              _buildSectionTitle('Flight Departures & Arrivals (${flights.length})'),
              ...flights.map((flight) => _flightCard(flight)).toList(),
            ],
          );
  }

  Widget _buildBillingTab(List<Billing> billingRecords) {
    return billingRecords.isEmpty
        ? const Center(child: Text("No matching billing records found."))
        : ListView(
            padding: const EdgeInsets.all(8.0),
            children: [
              _buildSectionTitle('Billing Status (${billingRecords.length})'),
              ...billingRecords.map((billing) => _billingCard(billing)).toList(),
            ],
          );
  }

  Widget _buildAirtimeAnalysisTab(List<DailyAirtime> dailyAirtime) {
      return dailyAirtime.isEmpty
        ? const Center(child: Text("No matching airtime records found."))
        : ListView(
            padding: const EdgeInsets.all(8.0),
            children: [
              _buildSectionTitle('Daily Airtime Analysis (${dailyAirtime.length})'),
              _buildAirtimeStatusSummary(dailyAirtime),
              const SizedBox(height: 10),
              ...dailyAirtime.map((airtime) => _airtimeCard(airtime)).toList(),
            ],
          );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
      child: Text(
        title,
        style: TextStyle(
          fontSize: 22,
          fontWeight: FontWeight.bold,
          color: Colors.indigo[800],
        ),
      ),
    );
  }

  Widget _buildAirtimeStatusSummary(List<DailyAirtime> dailyAirtime) {
    if (dailyAirtime.isEmpty) return const SizedBox.shrink();
    
    final Map<String, int> statusCounts = {};
    for (var airtime in dailyAirtime) {
      statusCounts[airtime.status] = (statusCounts[airtime.status] ?? 0) + 1;
    }
    
    final List<String> sortedKeys = statusCounts.keys.toList()..sort();

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'Status Summary',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            ...sortedKeys.map((key) => Padding(
              padding: const EdgeInsets.symmetric(vertical: 4.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(key, style: const TextStyle(fontSize: 15)),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                    decoration: BoxDecoration(
                      color: _getStatusColorFromName(key),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      statusCounts[key].toString(),
                      style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
            )),
          ],
        ),
      ),
    );
  }

  Color _getStatusColorFromName(String status) {
    if (status.contains('Red')) return Colors.red;
    if (status.contains('Yellow')) return Colors.orange;
    if (status.contains('Green')) return Colors.green;
    return Colors.grey;
  }

  Widget _flightCard(Flight flight) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Flexible(
                  child: Text(
                    'Flight: ${flight.flightNumber}',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.indigo[800],
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                if (flight.isLinkageMissing)
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.red.shade700,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: const Text(
                      'Linkage Missing!',
                      style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 12),
                    ),
                  ),
              ],
            ),
            const Divider(height: 20),
            _buildInfoRow(Icons.flight, 'Registration:', flight.regNo),
            _buildInfoRow(Icons.flight_takeoff, 'From:', '${flight.departureCity} at ${flight.departureTime}'),
            _buildInfoRow(Icons.flight_land, 'To:', '${flight.arrivalCity} at ${flight.arrivalTime}'),
            if (flight.airHours > 0)
              _buildInfoRow(Icons.timer_outlined, 'Air Hours:', '${flight.airHours.toStringAsFixed(2)} hrs'),
            _buildInfoRow(Icons.link, 'Linkage:', flight.travelLinkage.isEmpty ? 'N/A' : flight.travelLinkage,
                valueColor: flight.isLinkageMissing ? Colors.red.shade700 : Colors.green.shade700),
          ],
        ),
      ),
    );
  }
  
  Widget _billingCard(Billing billing) {
      Color statusColor;
      String statusText;

      if (billing.isOverdue) {
        statusColor = Colors.red.shade700;
        statusText = 'Overdue';
      } else if (billing.amountRemaining <= 0) {
        statusColor = Colors.green.shade700;
        statusText = 'Paid in Full';
      } else {
        statusColor = Colors.orange.shade700;
        statusText = 'Payment Pending';
      }

    return Card(
        child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                    Text(
                        'Flight: ${billing.flightNumber} - Billing',
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.indigo[800]),
                    ),
                    const Divider(height: 20),
                    _buildInfoRow(Icons.attach_money, 'Total Bill:', '\$${billing.totalBill.toStringAsFixed(2)}'),
                    _buildInfoRow(Icons.money_off, 'Amount Paid:', '\$${billing.amountPaid.toStringAsFixed(2)}'),
                    _buildInfoRow(Icons.event, 'Due Date:', DateFormat('yyyy-MM-dd').format(billing.dueDate)),
                    _buildInfoRow(Icons.info_outline, 'Status:', statusText, valueColor: statusColor),
                      _buildInfoRow(Icons.account_balance_wallet_outlined, 'Amount Remaining:', '\$${billing.amountRemaining.toStringAsFixed(2)}',
                        valueColor: billing.amountRemaining > 0 ? statusColor : Colors.green.shade700),
                ],
            ),
        ),
    );
  }

  Widget _airtimeCard(DailyAirtime airtime) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Aircraft: ${airtime.regNo}',
                    style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 4),
                  Text('Date: ${DateFormat('dd MMM yyyy').format(airtime.flightDate)}'),
                  Text('Total Air Hours: ${airtime.totalAirHours.toStringAsFixed(2)}'),
                ],
              ),
            ),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: airtime.statusColor,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Text(
                airtime.status,
                style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 12),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildInfoRow(IconData icon, String label, String value, {Color? valueColor}) {
      return Padding(
          padding: const EdgeInsets.symmetric(vertical: 4.0),
          child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                  Icon(icon, size: 16, color: Colors.grey[600]),
                  const SizedBox(width: 8),
                  Text('$label ', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.grey[800])),
                  Expanded(
                    child: Text(
                      value,
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: valueColor ?? Colors.grey[800],
                      ),
                    ),
                  )
              ],
          ),
      );
  }
}